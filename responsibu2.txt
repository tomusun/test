フロントエンドエンジニアに将来性はあるのか
https://itpropartners.com/blog/10447/

● Vue JS入門決定版！jQueryを使わないWeb開発 - 導入からアプリケーション開発まで体系的に動画で学ぶ
Angular.js、React.jsに比べて学習コストが低い注目度抜群のJavascriptフレームワーク Vue.js！
●レスポンシブル・スマートフォンサイト制作講座　70以上の充実レッスンで作れるようになる！ 
●フロントエンドエンジニアのための「Sass」講座 ~基礎から実践まで~ 
SassはCSSを拡張したメタ言語、CSSプリプロセッサであり、コードの再利用、変数、演算、関数、条件分岐などプログラミング要素をCSSに導入し、効率的で柔軟なコーディングを可能にした強力な言語です。
Sassが誕生してから10年余りが経ち、ある調査では開発者の60%以上がSassを使用しているという調査結果があるほど普及が進みました。この傾向は今後Sassを超える画期的な言語が開発されて普及するまで続くでしょう。CSSを生のまま書く現場は減っていき、当たり前のようにSassの技術が求められる時代になっています。

・マルチデバイス対応



■PC以外のデバイス(スマホなど)で閲覧して「見やすく」、「操作しやすく」、
「わかりやすい」サイトを制作すること
⇒
デバイスといっても様々で最近ではゲーム機やテレビを使ってWEBサイトを見ることが
可能になったのでそういったものにも対応するように。
※テクノの会社ホームページはマルチデバイス対応行っていない

・なぜマルチデバイス対応が必要か



■スマホを使う人が年々増えてきているから。
今まででも携帯を使ってWebサイトを見ることはあったが基本的にはテキストベースのもので
文章が並んでいるだけのもの。
スマートフォンやタブレットを利用してサイトを閲覧するユーザーがパソコンを使って
Webサイトを閲覧する数を超えたと言われている。

・スマホのOS



■iOS
開発元：Apple
■android
開発元：Googleなど

・違い



画面の構造、表示のされ方が違う
例
iPhoneは実機自体に戻るボタンがない。
画面を上にスクロールしてから、左上に出てくる戻るボタンを押さないといけない。
androidは画面の左下に常に戻るボタンがある。
■違いを考慮してサイトの要素の配置を考えないとOSの違いによってユーザーが操作しずらい画面になってしまうかもしれない。
サイト制作の場合は深くは考えなくてもいいかもしれないが今後変化していくものなので
常に最新の情報をキャッチできるように携帯のお店にいったりネットで調べたりすること。

・全機種に対応したスマートフォンサイトを作るようにするには



■リキッドレイアウトというもので画面サイズにウエブサイト全体をフィットさせるといった
方法で全機種に対応したスマートフォンサイト制作ができる
横幅
iPhone6：750px
iPhone5：640px

・リキッド



■液体の意味で流れる水のように可変するという意味を持つ。
表示領域に合わせて形を変えることができるWebサイトを作ればスマートフォン対応のサイトが作れる。
小さい画像(横幅320px)を横幅750pxの画面で見て画面名一杯に表示された場合は小さい画像を引き延ばすということになるのでぼやけてしまうことになる。
⇒元々から大きいサイズを用意しておけば画像をぼやけるということを防げる。
画像が縮小される分には画像は綺麗な状態を保てるので様々な画面の大きさに対応できる。
かといってものすごく大きい画像を用意するのも問題。
それだけサイトの読み込みにも時間がかかってしまうので単に大きい画像を用意すれば
いいというわけでもない。

・最近では640pxの横幅を基準にデザインするというのが主流
ほどんどのスマートフォンで640pxが横幅にジャストフィットするというのが理由
しかし、iPhone6は750pxなので注意

・スマートフォン独自のジェスチャー操作
指の動き



■タップ
(軽く画面をたたく。PCでいうマウスのクリック)
⇒ボタンの大きさを大きくすることをイメージ。ガイドラインとして44px
■ダブルタップ
(軽く画面を2回たたく。PCでいうマウスのダブルクリック)
■ホールド
しばらく押しぱなしにする操作。ホーム画面のアイコンを長押しすることでアプリ情報が出たりする。
パソコンでいうクリックしたままの状態
■スワイプ
画面を指ですべらせる
■ピンチイン・アウト
2本の指でつまむ広げる・ちじめる動作

・可変幅のレイアウト



ブラウザの幅に合わせて横幅が変化するサイトのこと
スマートフォンサイトをデザインするときは特別の理由がない限り
可変幅のレイアウトを採用すること
メディアクエリを採用する

・固定幅のレイアウト



ブラウザを小さくなるとブラウザからはみ出た部分は見えなくなってしまうレイアウトのこと
スマホだと見えなかったり、小さく見えずらかったりなど様々な問題が出てしまう
クリックした領域が小さく、クリックしたくない部分を誤って操作
したりととても使い勝手が悪いWebサイト

・スマホの画面の向き



■ポートレイト
スマホを縦向きにしている状態
■ランドスケープ
スマホを横向きに閲覧している状態

・ViewPortで出来ること



(1)ブラウザの表示幅を指定
(2)拡大縮小させるかを指定
(3)拡大縮小の比率を指定

・ViewPort



■Webサイトの表示できる領域のこと
⇒
例えば、今、パソコンで見える領域がViewPort
ViewPortをはみ出た部分では下にスクロールして見ることができる
Webサイトのどの部分をどのように表示させるのかといった指定をすることができる
のがViewPortというメタ要素

・viewPortを指定しない場合



デフォルトとしてはsまほのブラウザは幅980pxくらいになる。
160pxの画像が横に6つ並ぶイメージ

・viewPortにwidthを指定する場合



<meta name="viewport" content="width=640">
ブラウザの幅が640pxになる
160pxの画像が横に4つ並ぶイメージ

・viewPortの記述方法



<meta name="viewport" content="ここに書く">
プロパティ 説明 デフォルト 範囲
width 固定の横幅 980px 200px〜device-width
height 端末の横幅 auto 223px〜device-height
initial-scale ページロード率の拡大率 1
user-scalable ピンチイン・アウトで拡大縮小させるか yes yes/no
※拡大させたくなかったらnoを入れる
minimum-scale 縮小率の下限 0.25 0〜10
maximum-scale 拡大率の上限 1.6 0〜10

・Chromeのスマホエミュレータ



■chromeで右クリック⇒検証⇒タブのスマホマークをクリック
iPadを想定した仮想のブラウザを表示できるモード(chromeのエミュレーター)
iPhoneやandroidなどの機種の様々を選ぶことができる
例
<meta name="viewport" content="width=640">
にするとどの機種を選んでも160pxの画像が横に4つ並んでいる

・画面設計(ワイヤーフレーム)のポイント



例えばお申込みページに誘導させたい場合、お申込みページのボタンを大きく表示させたり
そこのボタンを押してもらえるようにコンテンツをうまく配置するといったことを考える
のが画面設計に当たるところ。
これはスマホサイトでも同じことが言える。
■PCサイトと違う点
(1)手で持ち、指でタップする
⇒指で操作する分、ボタンを大きくしたり、余白を大きくしたり、文字のサイズなども注意する
(2)画面自体がPCと比べて小さい

工程
画面設計⇒デザイン⇒マークアップ⇒実機検証

・画面設計のおすすめの方法



■紙に書いてみる
スマホと同じ大きさに近い紙に手書きで行うのをはじめにやる。
PCで作成するとサイズが2倍に表示されてしまうのでサイズ感がつかめない。
ボタンが押しやすいかどうか、この配置でいいか。小さすぎないか大きすぎないかをイメージ
できるので紙を使う
⇒メリット
(1)実際のサイズ感で考えることができる
(2)打合せしながら制作ができる
⇒その場で紙書いたりできる、みんなの意見を簡単に取り入れられる
(3)変更をすぐに適用できる

手書きのワイヤーフレームの参考として
Web Design Ledgerというサイトがおすすめ
⇒検索でwireを入れて検索
英語だが
「Wireframing and Prototyping Custom Web Forms」など選ぶと
手書きでどのようにワイヤーフレームが制作されているのかというのを見ることが
できる

紙に書いたものを設計書として用いても大丈夫だがデータが必要な場合がほとんど
なので清書する必要あり。清書するのに便利なのがCacooというサイト(テンプレートでiPhoneなどある)

・Cacoo



カクー
■フローチャート、ワイヤフレーム、UML図、ネットワーク構成図などを作成して安全に共有するためのオンライン作図ツール。

・スマホの特徴



(1)画面の大きさが小さい
(2)どこにでも持ち歩ける
(3)マウスクリックではなく、タッチ
(4)様々なジェスチャーがある
(5)「〜しながら」利用されることがほとんど
⇒例えば道案内アプリ
ユーザーが片手でもって親指で操作することが考えられる。
親指でボタンをタッチするのだからボタンが小さいと操作しにくい
また右手で操作しているときに左上にボタンがあったら操作しにくい
※誰がどんな時にどのように使うのかというのを考えながらスマートフォンサイトを
考える必要あり

・具体的なスマホサイトデザインのルール
ボタン編



UIのパーツが良ければ使いやすいサイトに直結
(1)タップ領域の大きさは幅も高さも44px以上、おおよそでは1cm前後の目安
ボタンやフォームが人間の指でタップしにくいものであったらそれとは違うもの
をタップしてページが切り替わってしまったり、押したいのに押せないのはまずい
(2)電卓アプリのように並んでいるボタンの周りには余白をあけること
※文字のフォントのサイズを14pxにする

・レイアウトのルール



(1)ページの左右に余白をとる
⇒スマホのサイト全体に左右に十分な余白をとる。文章の左右に余白など
画面の端のところに文字があると見えないし、ボタンやタップできるエリアが画面の端に
あると誤って押してしまって別のページに流れてしまう、それによってユーザーはストレス。
少なくも10px以上は必要。Photoshopの場合は20px以上の余白をあけること。(Photoshopでデザインするときは2倍の大きさになるため)
※画像は極力大きく見たいというユーザーが多いので左右に余白はとらなくてもよいかもしれない
(2)つめこみすぎない
⇒余白がないものは視認性と操作を犠牲にしやすいため

・スマートフォンサイトはリキッドレイアウトで構成されている
リキッドレイアウト



Webページの幅に合わせて、適切なレイアウトを保つようにする手法
スマホは機種によって画面のサイズはまちまちであるし、縦向きや横向きによっても変わってくるのでこれらの機種
それぞれに適したデザインをすることは時間のかかる作業であるし、現実味がない。
そこでリキッドレイアウトで各機種、各画面サイズに対応するようなレイアウト構成を行うのが今では主流。その手法として
リキッドレイアウトがある。

・リキッドレイアウトの仕組みとしては



HTMLのブロック要素の幅をCSSで横幅%の相対値で指定するという方法。
全てのサイトに対して同じようなサイトを表示することができる。
これを固定の幅にしてしまうと例えば横幅500pxと指定してしまうと横幅600pxのスマートフォンで見たら左右に余白が
空いてしまったりなどのレイアウトになってしまうが%指定だと同じようなデザインでスマホを閲覧することができる

・webサイトの表示速度はサイトを作成する際にサイトを作成する際に特に気を使うもの



全てのユーザーが良いネット環境の下にいると限らないし、高速回線を使用していても表示速度がかなり遅いwebサイトは
まだたくさんあるのでスマホサイトを作成する際、サイトを少しでも軽量化して表示速度を高速化させることが必要になって
くる。
速度が遅いとユーザーのストレスが溜まってページを閉じられ、サイトを見られなくなってしまう

・表示速度を上げる



ファイルを圧縮したり、画像を最適化したりなどあるが積極的に取り入れてほしいのは表現できるのものは全てCSSで表現する。
グラデーションや角の丸いボタンなどは今まで画像としてやっていたがその部分をCSSで表現する。
スマートフォンはほとんどのCSSをカバーしている

・よく使用するCSS3



(1)角の丸み
(2)グラデーション
(3)ボックスのシャドウ
(4)テキストのシャドウ

・無料かつ商用フリーのイラスト素材サイト



https://saruwakakun.com/design/tips/illust

・パソコンで作成したhtmlをスマートフォンで確認する方法



(1)テストサーバーにあげてネットで確認する方法
⇒更新するごとにアップロードしないといけなかったりで非効率だったりする。
(2)Chromeのデベロッパーツールを使う方法
⇒制作途中の簡単な確認に向いている。

・スマートフォンのブラウザはHTML5の対応が進んでいるのでスマートフォンサイトを作成するときは
進んでHTML5を使用することにすること

・HTML5を使うメリット



(1)今までではJavascriptを使ってしか利用できなかった動画や音声を簡単に扱うことができる
(2)重要な意味を持つタグが誕生した
⇒headerタグやfooterタグなど。各コンテンツがどのような役割を持っているのか細かく分類し認識させることができる
(3)スマフォは進んでHTML5に対応している

・section要素



セクションを表す要素
1つの章や節など単位でひとくくりを示すもの
章01
章や節を表すためにこのセクションタグの中に見出しタグを入れること
⇒
<section>
  <h1>章のタイトル</h1>
  <section><!-- さらに節が分かれていると思うので1つの区切りとしてsectionを追加 -->
    <h1>節のタイトル</h1><!-- 見出しが必要になってくる場合もあるので追加-->
    <p>文章</p><!-- 節に関するコンテンツを追加していく -->
  </section>
  <section>
    <h1>節2のタイトル</h1>
    <p>文章</p>
  </section>
</section>

・章や節について



http://www.kisc.meiji.ac.jp/~wonomasa/seminar09.htm

・article



「記事」を表す要素
ブログ記事、ニュースサイトの記事などを表すことができる要素
section要素との見分け方が難しいと言われている。
どっちを使えばいいか分からなくなった場合はそれだけで成り立つコンテンツかどうか考えて成り立つのであればarticle
⇒
<section><!-- 1つの区切り -->
  <h1>新着記事一覧</h1>
  <article><!--article要素に関して必ず見出しタグが必要  -->
    <h1>記事タイトル</h1>
    <p>記事本文</p>
  </article>
  <article><!--2つ目の記事 -->
    <h1>記事タイトル02</h1>
    <p>記事本文</p>
  </article>
</section>

・nav



ナビゲーションを表す要素
リンクの集合体に使用すること。
<nav>
  <ul>
    <li><a href="#">リンク01</a></li>
    <li><a href="#">リンク02</a></li>
    <li><a href="#">リンク03</a></li>
  </ul>
</nav>

・header



section要素のheader、articleのheaderとしても使用できる
<header>
  <h1>サイトの名前</h1>
  <nav>ナビゲーション(リンク一覧)</nav>
</header>

<article>
  <header>
    <h1>ブログ記事のタイトル</h1>
    <p>投稿日</p>
  </header>
  <p>ブログ記事の本文</p>
</article>

・<meta name="viewport" content="width=340">



⇒可視領域の幅が340pxに設定される。
スマホのサイズが342pxであったら左右の右か左かに2px余白が空くようなレイアウトになってしまったりして中途半端になる。
どのようなデバイスでも横幅名一杯で指定するという書き方
⇒
<meta name="viewport" content="width=device-width">
これが横幅がデバイスの横幅という設定になる

・<meta name="viewport" content="width=device-width,user-scalable=no>



⇒ズームさせたくなかったらno

・<meta name="viewport" content="width=device-width,user-scalable=no,minimum-scale=0.5>



⇒縮小したときに0.5倍のサイズまで縮小ができるという指定。デフォルトでは0.25倍

・CSS3を導入する理由



(1)::last-childなどの便利な疑似クラス
(2)属性セレクタが使える
(3)グラデーションなどの表現ができる
⇒サイト軽量化
※またアニメーションも表現できる

・ベンダープレフィックス



CSS3はまだ草案段階であり、採用されるかわかっていないので
各ブラウザが先行実装といった形でそれらの機能を動作させている。
動作させるにはベンダープレフィックス(先行実装されているCSS3を利用するための
接頭辞)を記述
例
-moz-など
先行実装された機能を呼び出すことができる
a {
  opacity: 0.7;
  -moz-opacity: 0.7;
  -webkit-opacity: 0.7;<!-- Chromeとsafariに対応 -->
  -o-opacity: 0.7;<!-- operaに対応 -->
  -ms-opacity: 0.7;<!-- IEに対応 -->
}
⇒CSS3が完全に使えるようになるまでは時間がかかるのでそれまでの間は
ベンダープレフィックスを追加して草案段階の機能を実装する際に記述の必要ある

・ボタンを押すと電話を掛けさせる方法



<a href="tel:000-0000-0000">電話をかけるにはこちらをタップ</a>
スマホだと発信かキャンセルのボタンが出てくる

・html5で追加されているフォームの機能
type属性を指定する方法でいちいちID名やクラス名を指定しなくても個別でCSSをかけるようにできるようになった
placeholderの機能も追加
:focusといった疑似クラスも追加



input[type="text"] {
    padding: 10px;
    font-size: 16px;
    color: #aaa;
    border: 1px solid #ccc;
    width: 300px;
}
input[type="text"]:focus {
    background-color: #eee;
}
⇒
<table>
    <tr>
        <td>お名前：</td>
        <td>
            <input type="text" name="お名前" placeholder="お名前を入力してください。">
        </td>
    </tr>
    <tr>
        <td>性別：</td>
        <td>
            <input type="radio" name="男性" value="男性"> 男性<br>
            <input type="radio" name="女性" value="女性"> 女性
        </td>
    </tr>
</table>

・通常のボックス算出方法



width + padding + border
height+ padding + border
※少し余白を加えただけでレイアウト崩れたり、ボックスがはみ出たりしてしまうことがある
スマホのレイアウトの場合、基本的に横幅は%指定なので加えたpaddingやborderを横幅からどうやって引けばいいのか分からなくなってしまうのでCSS3で新しく出たbox-sizingプロパティ(ボックス算出方法を変更できる)

・box-sizingプロパティ



(ボックス算出方法を変更できる)
paddingやborderを幅と高さに含めないような指定することができる
●content-box
境界線とpaddingを要素の幅に含めない
●border-box
境界線とpaddingを要素の幅に含める
※これのおかげでスマホサイトの%指定のサイトのレイアウトも楽になる
ほとんど要素にかけておくと便利
⇒
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
・
* {
    margin: 0;
    padding: 0;
}
#wrapper {
    width: 1000px;
    height: 900px;
    background-color: pink;
    margin: auto;
}

#left {
    width: 400px;
    height: 100px;
    float: left;
    background-color: #eee;
    border: 10px solid black;//box-sizingがないことでレイアウトが崩れる。右のボックスが入り込めなくなって下に移ってしまっている。box-sizing: border-box;を追加すると境界線の幅が要素に含まれる形になって解決
}

#right {
    width: 600px;
    height: 100px;
    float: right;
    background-color: #999;
}
⇒
<di v id="wrapper">
    <di v id="left">幅：400pxのボックス</di v>
    <di v id="right">幅：600pxのボックス</di v>
</di v>

・画像を最適化してサイト表示を早くする方法



回線速度や端末のスペックがいつも良いとは限らないのでサイズの大きい画像を取り扱う際は注意が必要。
画像には色々情報が含まれていてWebサイトを表示するうえで不要な情報がいくつも含まれている。(作成日や権利者情報は不要)。そのせいで画像のファイルのサイズが大きくなってしまってwebサイトの表示が遅くなってしまったりする。
不要な情報(作成日や権利者情報）を減らして(専用のツールを使う)webサイトの表示を早くすることを画像の最適化と呼ぶ。
不要な情報を削除するだけでなく画像にあったファイル形式を選ぶということも必要

・Webサイトで使用できる画像タイプ3種類



画像に適したものを選ぶことによって画像のサイズを小さくすることができる
jpg・・・写真のような色の多い画像
png・・・背景が透明の色が多いもの
⇒pngの中でも8と24とで種類があるが8の方を選ぶと透明部分とそうでない部分でギザギザした白いラインがが入ってきたなくなってしまうので注意
gif・・・アニメーション画像。ほとんど使わない

・JPG画像を圧縮してサイズを減らす方法



圧縮するだけで見た目の劣化なくやれるのでお勧め
ほとんどのwebデザイナはWebサイトを作成する際、画像を圧縮している
ブラウザだけで圧縮できるTinyJPG
https://tinyjpg.com/
⇒画像をドロップアンドドロップするだけで簡単に圧縮できる
右側に出てくるマイナスの数値は圧縮で減らせたサイズの数

pingファイルを圧縮したかったらtinypng
https://tinypng.com/

★Web学科サイト制作

・headerタグは
古いブラウザのことも考えてID属性を使ったCSSの適用させた方がよい
例
<header id="header">

・大枠のボックスを作成



<header id="header">
<di v id="mainimage">
<section id="news">
<section id="footer_nav">
<footer id="footer">

・boxタイプの要素はデフォルトでwidth100%がかかっているので特に指定しなくても横幅は100%
に設定される。
なので画面サイズを変えてもNESTschoolの文字は横幅はずっと中央にきたまま

・line-heightで位置を中間にするのは2行以上だと使えないので注意

・ハンバーガーボタンはabsoluteを使って絶対的に固定させる

・<header id="header">
  <h1><a href="#">NESTschool</a></h1>
  <p id="nav_btn">
    <a href="#">
      <img src="images/header-menu.png">
    </a>
  </p>
</header>
⇒ハンバーガーボタンの画像が見本のよりも大きく表示されている



■スマートフォンのディスプレイはRetina Displayなのでパソコンでデザインしているものより
も倍の大きさでデザインしているがそのまま書き出しているので倍の大きさで画像が表示されている
⇒画像そのもののサイズを半分に調整してあげないといけない
<img src="images/header-menu.png" width="23">
高さは横幅に合わせて自動で比率をたまった状態で調整される

・ハンバーガーボタンの配置



<header id="header">
  <h1><a href="#">NESTschool</a></h1>
  <p id="nav_btn">
    <a href="#">
      <img src="images/header-menu.png" width="23">
    </a>
  </p>
</header>
⇒
#header {
 background-color: #1c1c1c;
 height: 53px;
 position: relative;
}
p#nav_btn {
 position: absolute;
 top: 10px;
 left: 10px;
}
⇒このやり方だと問題がある。このボタン自体をタップしないとメニューが開かなくなってしまうから。また小さいのでタップしずらい。
クリックできる範囲を拡大をしてあげた方が使いやすいボタン。
aタグのエリア自体を拡大させる
p#nav_btn {
 position: absolute;
 top: 0px;
 left: 0px;
}
p#nav_btn a {
 display: block;
 width: 53px;
 height: 38px;
 background-color: yellow;//押せる領域を確認するため
 text-align: center;//ハンバーガーボタンの位置を中央
 padding-top: 15px;//ハンバーガーボタンの位置を中央
}

・newsの中のテキストのお知らせや一覧が端っこにぴったりついている状態だとスマホを両手持ち
か片手持ちかに関わらず間違って一覧リンクを押してしまうことがあるので
左右に少し余白をあけるようにした方がいい

・paddingは入れた分要素が大きくなるが横幅を指定していない場合は横幅に収まるように
paddingも収まってくれるので別途padding分引いたりすることをしなくてもよい。要素の中に
paddingが含まれてくれる
⇒
#news #news_header {
 background-color: #1c1c1c;
 color: #fff;
 padding: 8px 15px;
}
⇒
width:100%を加えると横幅が伸びてしまうので注意

・右端の一覧のテキストの左にアイコンを置く



<section id="news">
  <header id="news_header" class="cf">
    <h1>お知らせ</h1>
    <p id="more"><a href="#">一覧</a></p>
  </header>
⇒
#news #news_header #more a {
 color: #fff;
 font-size: 12px;
 text-decoration: none;
 display: block;
 background: url(images/icon_right.png) no-repeat left center;
 background-size: 6px 12px;//背景の画像の大きさの微調整
}
⇒上記の状態だと文字にアイコンが重なってしまうので
「padding-left: 18px;」としてbox自体を広げてあげることで解決。
left centerとしているのでちゃんと表示される
