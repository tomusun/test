googleDeveloper
・デベロッパーツールの位置を変える



Commnad + Shift + D

・Elementsパネルからconsoleパネルが見えなくなっている場合



ctrl shift F

・Elementsパネルのstylesで「user agent stylesheet」



「user agent stylesheet」というのはブラウザがデフォルトで持っているスタイルなので

・Inherited from body



CSS は基本的に親要素からスタイルを継承するので、そうして継承されたスタイルがある場合には「Inherited from …」に書かれているので、これも見ておきましょう。
例
Inherited from body

・ある要素に新しくスタイルを当てたい場合



それから既存のスタイルをいじることもできるが、ある要素に新しくスタイルを当てたい場合には、それを選択して「+」マークを押すと、そのセレクタが入った状態でスタイルを作れる
例えば「font-size: 24px;」とすると、新しくスタイルが当てられているのが分かるかと

・コンソールパネル
JavaScript をそのまま試すことができる
例えば alert 命令の動作を確認したいときには、「alert(1)」
長い命令を打ちたいときには、Shift+Enter を押すと複数行の入力もできる
■Elements パネルと一緒に使うと便利な記号
例えば要素を選択して、今選択している要素について知りたいという場合には、「$0」という記号
それを実行すると、今選択されている要素がログに表示
その 1 つ前を知りたいときは「$1」、2 つ前は「$2」…、といった具合に「$4」まで遡れる
■そのほかちょっと変わったところだと、copy コマンドというのがあります。
「copy($0)」としてみると、ログには何も表示さないが、クリップボードにコピー(今選択されている要素がコピー)

・Emulation
Chromeのエミュレーターを開く
■こちらはスマホとかタブレットなどで見たときにどう見えるかというのをエミュレーション（Elementsの左横にあるスマホアイコンの様な物をクリックすればエミュレーションしてくれる。）
例えば iPhone 5 で見たときにこのサイトがどうなるか見れる。
「Emulate」ボタンをクリックすると、縦長の画面になるので実際に見るとしたらこのくらいしか見えないよ、などと教えてくれるので便利かと
リセットする場合は「Reset」ボタンを押すと普通の PC ビューになる

・F12　画面の要素とＨＴＭＬのコードの紐づき
Elementsの左側にある左上矢印ボタンを押すと対象の画面の要素とＨＴＭＬのコードとが紐づいていることが分かる。

・F12開発で関数の呼び出し先の行き方
デバックで呼び出し元にカーソルを当てると「function〜」と出てくるのでそれをクリック。

・自分が<p style="color:red">あいうえお</p>としたものをイメージに近い色に変更することが可能。
■ElementsのStylesグループ内のstyles表示： 色要素の編集はカラーピッカーが表示されて、イメージに近い色を選択できる。
自分が<p style="color:red">あいうえお</p>としたものをイメージに近い色に変更することが可能。

・Chromeのデバッガーが他のブラウザーと比較して優れている点は、
デバッグ機能が充実していることである。サイドバーを見ると（次の画面）、その充実ぶりが分かる。

・JSコードを直接編集
実行までの流れ
■Sourcesタブでコードを直接編集できる。また、オートコンプリートで候補が表示される。
ソースを右クリックして、［Local modifications］をクリックすると下側に「History」タブが出てくる。
コードを書いているとこで右クリックしてSaveを押すと編集した内容を確認できる。
「History」タブの［revert］をクリックすると、変更内容を破棄できる。
Saveしたあと自分で作った画面のボタンを押すなどすると編集した内容が反映された処理が実行される。
※自分のローカルにあるファイルは反映されるわけではない。

・デバック中の変数の値を変更できる
■デベロッパーツールの右側にScope Variables(または▼Scopeと表示)というパネルがありますが、これを開くと処理が止まっている箇所での変数の値を確認することができます。
直接変数をクリックして、変数の値を処理の途中で書き換えることもできます。

・Consoleパネル
■Shift＋Enterキーを押すと実行されずに改行されるので、複数行の入力もできる。これによりJavaScriptで関数（＝function）を書いてテストをしてみるという使い方もできる。次の画面はその例。
例
function a(){
console.log(123);
}
a();
■デバック中、Consoleパネルで処理の実行結果も確かめられる
$('.data').length;
3

○デバック中、Consoleパネルで変数名を入力



■デバック中、Consoleパネルで変数名を入力することで、オブジェクトの中身を確認できる。ここでは「a」という変数の中身が階層で表示されている

○F12でJS表示されないとき



JS表示されないときは画面の更新ボタン押す

○エクリプスで修正したJSの更新の仕方



■F12の対象JSファイルに対して、右クリックでopen in new tabを選ぶ
スタブで開かれるので更新ボタン2回ぐらい押す。画面の方でも更新ボタン押すと反映される

・F12のネットワークタブ



URL叩いた時や更新ボタンを押したときの要求ヘッダーや応答ヘッダやbodyなども見える 。

・ChromeのF12でsourceタブはhtmlが反映されない。



Javascriptは反映できる。
Elementsを見る。左上矢印ボタンを押してから画面の目的のhtmlのところ見れる。