◯TomcatもJAVAで動いている
Tomcatパフォーマンスの見直しはまずは



メモリを見るとよい

◯JVMの中は



スタック領域とヒープ領域
JVMの中で区分けしている

◯スタック領域
ヒープ領域



オブジェクトはヒープ領域に作られる。ヒープ領域のメモリサイズがポイント

◯ヒープ領域の中も分かれている



Eden構成、Survivor領域、Tenured領域
※Eden構成、Survivor領域はNew領域
Tenured領域はold領域
※インスタンス化(new)された状態でEden領域に入ってくる
オブジェクトを管理する情報が書き込まれる形。

◯Survivor領域の中も分かれている



From空間とTo空間

◯JavaのGC(ガベージコレクション)の仕組み



■Eden領域が一杯になると
Survivor領域のTo空間に書き込みを移す。(minor GC)
To空間でもいっぱいになるとFrom空間に移す。(生き残った(参照されている)オブジェクトはTo空間からFrom空間に移動)
それでも参照され続けているとTenured領域へ。
Eden構成、Survivor領域、Tenured領域でもいっぱいになってくるとアプリケーションを止めてしまう。リクエストしてもダメになってしまう。

◯GCのタイミングは



JVMが管理。
プログラムではどうにもできない。

◯Tomcatのボトルネックはどこか



まずはJVMの現状を確認する
JVMの現状を簡単に確認するためのコマンド2つ
1、jpsコマンド
現在稼働中のJVMプロセスを一覧表示。
2、jstatコマンド 
jpsコマンドと一緒に使う。JVMのパフォーマンス統計データを表示する。

◯jpsコマンド実行方法



■jpsコマンドはjavaのプロセスを確認するコマンドです。jdkのbinをpathに通しておけば実行可能。
https://qiita.com/i_matsui/items/4997ebedbdd7a6495509
⇒Pleiadesならコマンドプロンプトで
C:\Users\tomokichi\Downloads\pleiades\pleiades\eclipse\jre\bin
までｃｄを行えばコマンドを打てる

◯Tomcatを起動してから
Jpsコマンドを打つと



「13608 Jps
16092 Bootstrap」と表示。JAVAのアプリケーションは2つ動いていると確認できる。
※BootstrapはTomcatを表している。
16092はプロセスId。

◯jstat -gcutil 16092とコマンドを打つと
  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
  0.00  99.76   8.78  17.59  98.01  95.85      5    0.061     1    0.036    0.097
と表示された。




※EはEden領域
S0とS1はSurvivor領域。Toのところにメモリが使われているよ。
YGCはminor GC。YGCTはその実行時間。
5回ガレージコレクションが走ってその時間が0.061秒。
FGCが頻発(10や20)して入れば要注意。

◯Full GC(Major GC)が実行



■New領域とOld領域が一杯になるとFull GC(Major GC)が実行
メモリがいっぱいな状態
JVMの割り当てられたメモリの領域をすべて食いつぶしてしまっている。
Full GCが1回や2回程度なら問題ない。

◯Full GCの危険性



1、アプリケーションが停止状態になる。Stop the World
2、本当にアプリケーションが止まる。 OutOfMemoryError(ぞくにいうメモリリーク)
OutOfMemoryErrorはGCを行ってもメモリの消費が解消されない事象。早急に対処が必要。

◯Minor GCに時間がかかっている



New領域のメモリサイズが大きすぎる可能性

◯Full GCに時間がかかっている



Old領域のメモリサイズが大きすぎる可能性

◯後々のチューニングに困らないために



プログラム以外でも対処すべきポイントは色々。
＜要件定義＞
　非機能要件をしっかりと。同時アクセスやレスポンスタイムが定義できていれば、何か遅いときに切り分けが出来たりする。
※非機能要件にお金を出してくれるお客は少ない
＜基本設計＞
JVMにどれだけメモリを割り当てるかなどがしっかりできているとチューニングすることもない。

◯機能要件、非機能要件



https://hnavi.co.jp/knowledge/blog/functional-requirement/
機能要件は、ソフトウェアやシステム開発において必要となる大切な工程です。
制作するシステムに盛り込みたい機能をクライアントから適切に聞き出し、どのような機能が必要なのかを明確に定義します。
また、機能要件と反する言葉に、「非機能要件」があります。
非機能要件は、クライアントから提示された機能ではなく、レスポンススピードやセキュリティといった機能要件以外の要件を指します。 

◯Tomcatのチューニング基本



■JVMのメモリ割り当てを変更する
JVM起動時に設定できる主な項目
●-Xms  ヒープ領域起動(JVM起動時)時のサイズ
※物理メモリからJVMに割り当てられてもらえる領域
●-Xmx ヒープ領域の最大サイズ
※JVMが最大どこまで使えるのか
●-XX:NewSize　        New領域のサイズ
●-XX:MaxNewSize　New領域の最大サイズ
●-XX:SurvivorRatio　From、To領域の使用比率

◯実際の設定



■setenv.batを自分で作って設定する(基本的にはファイルがないので自分で作る)
Tomcatが使用するJVMの起動パラメータを設定できる。
＜記入例＞
CATALINA_OPTS="-sever -Xms1024M -Xmx1024M"
export CATALINA_OPTS
※1ギガ使えるようにしている
jps -vコマンドで反映されているか確認

◯基本となる設定



-sever
-Xms1024M
-Xmx1024M
-XX:NewSize 256M
-XX:MaxNewSize 256M
-XX:SurvivorRatio=6
-XX:MaxTenuringThreshold 15　※New領域からOld領域に移動する閾値
-XX:TargetSurvivorRatio 90　※Survivor領域の閾値